package dao_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_LOGIN_INFO".
*/
public class UserLoginInfoDao extends AbstractDao<UserLoginInfo, String> {

    public static final String TABLENAME = "USER_LOGIN_INFO";

    /**
     * Properties of entity UserLoginInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Student_id = new Property(0, String.class, "student_id", false, "STUDENT_ID");
        public final static Property Chef_id = new Property(1, String.class, "chef_id", false, "CHEF_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", true, "USER_ID");
        public final static Property User_name = new Property(3, String.class, "user_name", false, "USER_NAME");
        public final static Property First_name = new Property(4, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Last_name = new Property(5, String.class, "last_name", false, "LAST_NAME");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property City = new Property(9, String.class, "city", false, "CITY");
        public final static Property State = new Property(10, String.class, "state", false, "STATE");
        public final static Property Zip = new Property(11, String.class, "zip", false, "ZIP");
        public final static Property Image_url = new Property(12, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Status = new Property(13, String.class, "status", false, "STATUS");
        public final static Property Session_token = new Property(14, String.class, "session_token", false, "SESSION_TOKEN");
        public final static Property House_id = new Property(15, String.class, "house_id", false, "HOUSE_ID");
        public final static Property House_name = new Property(16, String.class, "house_name", false, "HOUSE_NAME");
        public final static Property Campus_id = new Property(17, String.class, "campus_id", false, "CAMPUS_ID");
        public final static Property Campus_name = new Property(18, String.class, "campus_name", false, "CAMPUS_NAME");
        public final static Property Code = new Property(19, String.class, "code", false, "CODE");
        public final static Property Chef_name = new Property(20, String.class, "chef_name", false, "CHEF_NAME");
        public final static Property Chef_image_url = new Property(21, String.class, "chef_image_url", false, "CHEF_IMAGE_URL");
        public final static Property Is_lateplate = new Property(22, String.class, "is_lateplate", false, "IS_LATEPLATE");
        public final static Property Is_lateplate_outofhouse = new Property(23, String.class, "is_lateplate_outofhouse", false, "IS_LATEPLATE_OUTOFHOUSE");
    }


    public UserLoginInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserLoginInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_LOGIN_INFO\" (" + //
                "\"STUDENT_ID\" TEXT," + // 0: student_id
                "\"CHEF_ID\" TEXT," + // 1: chef_id
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 2: user_id
                "\"USER_NAME\" TEXT," + // 3: user_name
                "\"FIRST_NAME\" TEXT," + // 4: first_name
                "\"LAST_NAME\" TEXT," + // 5: last_name
                "\"EMAIL\" TEXT," + // 6: email
                "\"PHONE\" TEXT," + // 7: phone
                "\"ADDRESS\" TEXT," + // 8: address
                "\"CITY\" TEXT," + // 9: city
                "\"STATE\" TEXT," + // 10: state
                "\"ZIP\" TEXT," + // 11: zip
                "\"IMAGE_URL\" TEXT," + // 12: image_url
                "\"STATUS\" TEXT," + // 13: status
                "\"SESSION_TOKEN\" TEXT," + // 14: session_token
                "\"HOUSE_ID\" TEXT," + // 15: house_id
                "\"HOUSE_NAME\" TEXT," + // 16: house_name
                "\"CAMPUS_ID\" TEXT," + // 17: campus_id
                "\"CAMPUS_NAME\" TEXT," + // 18: campus_name
                "\"CODE\" TEXT," + // 19: code
                "\"CHEF_NAME\" TEXT," + // 20: chef_name
                "\"CHEF_IMAGE_URL\" TEXT," + // 21: chef_image_url
                "\"IS_LATEPLATE\" TEXT," + // 22: is_lateplate
                "\"IS_LATEPLATE_OUTOFHOUSE\" TEXT);"); // 23: is_lateplate_outofhouse
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_LOGIN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserLoginInfo entity) {
        stmt.clearBindings();
 
        String student_id = entity.getStudent_id();
        if (student_id != null) {
            stmt.bindString(1, student_id);
        }
 
        String chef_id = entity.getChef_id();
        if (chef_id != null) {
            stmt.bindString(2, chef_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(5, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(6, last_name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(10, city);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(11, state);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(12, zip);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(13, image_url);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(14, status);
        }
 
        String session_token = entity.getSession_token();
        if (session_token != null) {
            stmt.bindString(15, session_token);
        }
 
        String house_id = entity.getHouse_id();
        if (house_id != null) {
            stmt.bindString(16, house_id);
        }
 
        String house_name = entity.getHouse_name();
        if (house_name != null) {
            stmt.bindString(17, house_name);
        }
 
        String campus_id = entity.getCampus_id();
        if (campus_id != null) {
            stmt.bindString(18, campus_id);
        }
 
        String campus_name = entity.getCampus_name();
        if (campus_name != null) {
            stmt.bindString(19, campus_name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(20, code);
        }
 
        String chef_name = entity.getChef_name();
        if (chef_name != null) {
            stmt.bindString(21, chef_name);
        }
 
        String chef_image_url = entity.getChef_image_url();
        if (chef_image_url != null) {
            stmt.bindString(22, chef_image_url);
        }
 
        String is_lateplate = entity.getIs_lateplate();
        if (is_lateplate != null) {
            stmt.bindString(23, is_lateplate);
        }
 
        String is_lateplate_outofhouse = entity.getIs_lateplate_outofhouse();
        if (is_lateplate_outofhouse != null) {
            stmt.bindString(24, is_lateplate_outofhouse);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserLoginInfo entity) {
        stmt.clearBindings();
 
        String student_id = entity.getStudent_id();
        if (student_id != null) {
            stmt.bindString(1, student_id);
        }
 
        String chef_id = entity.getChef_id();
        if (chef_id != null) {
            stmt.bindString(2, chef_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(5, first_name);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(6, last_name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(10, city);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(11, state);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(12, zip);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(13, image_url);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(14, status);
        }
 
        String session_token = entity.getSession_token();
        if (session_token != null) {
            stmt.bindString(15, session_token);
        }
 
        String house_id = entity.getHouse_id();
        if (house_id != null) {
            stmt.bindString(16, house_id);
        }
 
        String house_name = entity.getHouse_name();
        if (house_name != null) {
            stmt.bindString(17, house_name);
        }
 
        String campus_id = entity.getCampus_id();
        if (campus_id != null) {
            stmt.bindString(18, campus_id);
        }
 
        String campus_name = entity.getCampus_name();
        if (campus_name != null) {
            stmt.bindString(19, campus_name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(20, code);
        }
 
        String chef_name = entity.getChef_name();
        if (chef_name != null) {
            stmt.bindString(21, chef_name);
        }
 
        String chef_image_url = entity.getChef_image_url();
        if (chef_image_url != null) {
            stmt.bindString(22, chef_image_url);
        }
 
        String is_lateplate = entity.getIs_lateplate();
        if (is_lateplate != null) {
            stmt.bindString(23, is_lateplate);
        }
 
        String is_lateplate_outofhouse = entity.getIs_lateplate_outofhouse();
        if (is_lateplate_outofhouse != null) {
            stmt.bindString(24, is_lateplate_outofhouse);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public UserLoginInfo readEntity(Cursor cursor, int offset) {
        UserLoginInfo entity = new UserLoginInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // student_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chef_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // first_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // last_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // city
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // state
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // zip
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // image_url
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // status
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // session_token
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // house_id
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // house_name
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // campus_id
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // campus_name
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // code
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // chef_name
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // chef_image_url
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // is_lateplate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // is_lateplate_outofhouse
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserLoginInfo entity, int offset) {
        entity.setStudent_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChef_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirst_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLast_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setState(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setZip(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setImage_url(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatus(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSession_token(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHouse_id(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHouse_name(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCampus_id(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCampus_name(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCode(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setChef_name(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setChef_image_url(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIs_lateplate(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIs_lateplate_outofhouse(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserLoginInfo entity, long rowId) {
        return entity.getUser_id();
    }
    
    @Override
    public String getKey(UserLoginInfo entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserLoginInfo entity) {
        return entity.getUser_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
