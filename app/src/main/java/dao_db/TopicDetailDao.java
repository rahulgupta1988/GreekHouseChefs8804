package dao_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPIC_DETAIL".
*/
public class TopicDetailDao extends AbstractDao<TopicDetail, Void> {

    public static final String TABLENAME = "TOPIC_DETAIL";

    /**
     * Properties of entity TopicDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Topic_name = new Property(0, String.class, "Topic_name", false, "TOPIC_NAME");
        public final static Property Description = new Property(1, String.class, "Description", false, "DESCRIPTION");
        public final static Property Topic_created_by = new Property(2, String.class, "Topic_created_by", false, "TOPIC_CREATED_BY");
        public final static Property Topic_image_url = new Property(3, String.class, "Topic_image_url", false, "TOPIC_IMAGE_URL");
        public final static Property Topic_created_on = new Property(4, String.class, "Topic_created_on", false, "TOPIC_CREATED_ON");
        public final static Property Total_comments = new Property(5, String.class, "Total_comments", false, "TOTAL_COMMENTS");
    }


    public TopicDetailDao(DaoConfig config) {
        super(config);
    }
    
    public TopicDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPIC_DETAIL\" (" + //
                "\"TOPIC_NAME\" TEXT," + // 0: Topic_name
                "\"DESCRIPTION\" TEXT," + // 1: Description
                "\"TOPIC_CREATED_BY\" TEXT," + // 2: Topic_created_by
                "\"TOPIC_IMAGE_URL\" TEXT," + // 3: Topic_image_url
                "\"TOPIC_CREATED_ON\" TEXT," + // 4: Topic_created_on
                "\"TOTAL_COMMENTS\" TEXT);"); // 5: Total_comments
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPIC_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopicDetail entity) {
        stmt.clearBindings();
 
        String Topic_name = entity.getTopic_name();
        if (Topic_name != null) {
            stmt.bindString(1, Topic_name);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(2, Description);
        }
 
        String Topic_created_by = entity.getTopic_created_by();
        if (Topic_created_by != null) {
            stmt.bindString(3, Topic_created_by);
        }
 
        String Topic_image_url = entity.getTopic_image_url();
        if (Topic_image_url != null) {
            stmt.bindString(4, Topic_image_url);
        }
 
        String Topic_created_on = entity.getTopic_created_on();
        if (Topic_created_on != null) {
            stmt.bindString(5, Topic_created_on);
        }
 
        String Total_comments = entity.getTotal_comments();
        if (Total_comments != null) {
            stmt.bindString(6, Total_comments);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopicDetail entity) {
        stmt.clearBindings();
 
        String Topic_name = entity.getTopic_name();
        if (Topic_name != null) {
            stmt.bindString(1, Topic_name);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(2, Description);
        }
 
        String Topic_created_by = entity.getTopic_created_by();
        if (Topic_created_by != null) {
            stmt.bindString(3, Topic_created_by);
        }
 
        String Topic_image_url = entity.getTopic_image_url();
        if (Topic_image_url != null) {
            stmt.bindString(4, Topic_image_url);
        }
 
        String Topic_created_on = entity.getTopic_created_on();
        if (Topic_created_on != null) {
            stmt.bindString(5, Topic_created_on);
        }
 
        String Total_comments = entity.getTotal_comments();
        if (Total_comments != null) {
            stmt.bindString(6, Total_comments);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TopicDetail readEntity(Cursor cursor, int offset) {
        TopicDetail entity = new TopicDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Topic_name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Description
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Topic_created_by
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Topic_image_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Topic_created_on
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Total_comments
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopicDetail entity, int offset) {
        entity.setTopic_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTopic_created_by(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTopic_image_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTopic_created_on(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotal_comments(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TopicDetail entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TopicDetail entity) {
        return null;
    }

    @Override
    public boolean hasKey(TopicDetail entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
