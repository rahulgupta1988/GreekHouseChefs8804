package dao_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_CATEGORY_TOPICS".
*/
public class AllCategoryTopicsDao extends AbstractDao<AllCategoryTopics, Void> {

    public static final String TABLENAME = "ALL_CATEGORY_TOPICS";

    /**
     * Properties of entity AllCategoryTopics.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Forum_topics_id = new Property(0, String.class, "Forum_topics_id", false, "FORUM_TOPICS_ID");
        public final static Property Forum_category_id = new Property(1, String.class, "Forum_category_id", false, "FORUM_CATEGORY_ID");
        public final static Property Topic_name = new Property(2, String.class, "Topic_name", false, "TOPIC_NAME");
        public final static Property Created_on = new Property(3, String.class, "Created_on", false, "CREATED_ON");
        public final static Property Created_by = new Property(4, String.class, "Created_by", false, "CREATED_BY");
        public final static Property Total_comments = new Property(5, String.class, "Total_comments", false, "TOTAL_COMMENTS");
        public final static Property Image_url = new Property(6, String.class, "image_url", false, "IMAGE_URL");
    }


    public AllCategoryTopicsDao(DaoConfig config) {
        super(config);
    }
    
    public AllCategoryTopicsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_CATEGORY_TOPICS\" (" + //
                "\"FORUM_TOPICS_ID\" TEXT," + // 0: Forum_topics_id
                "\"FORUM_CATEGORY_ID\" TEXT," + // 1: Forum_category_id
                "\"TOPIC_NAME\" TEXT," + // 2: Topic_name
                "\"CREATED_ON\" TEXT," + // 3: Created_on
                "\"CREATED_BY\" TEXT," + // 4: Created_by
                "\"TOTAL_COMMENTS\" TEXT," + // 5: Total_comments
                "\"IMAGE_URL\" TEXT);"); // 6: image_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_CATEGORY_TOPICS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AllCategoryTopics entity) {
        stmt.clearBindings();
 
        String Forum_topics_id = entity.getForum_topics_id();
        if (Forum_topics_id != null) {
            stmt.bindString(1, Forum_topics_id);
        }
 
        String Forum_category_id = entity.getForum_category_id();
        if (Forum_category_id != null) {
            stmt.bindString(2, Forum_category_id);
        }
 
        String Topic_name = entity.getTopic_name();
        if (Topic_name != null) {
            stmt.bindString(3, Topic_name);
        }
 
        String Created_on = entity.getCreated_on();
        if (Created_on != null) {
            stmt.bindString(4, Created_on);
        }
 
        String Created_by = entity.getCreated_by();
        if (Created_by != null) {
            stmt.bindString(5, Created_by);
        }
 
        String Total_comments = entity.getTotal_comments();
        if (Total_comments != null) {
            stmt.bindString(6, Total_comments);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(7, image_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AllCategoryTopics entity) {
        stmt.clearBindings();
 
        String Forum_topics_id = entity.getForum_topics_id();
        if (Forum_topics_id != null) {
            stmt.bindString(1, Forum_topics_id);
        }
 
        String Forum_category_id = entity.getForum_category_id();
        if (Forum_category_id != null) {
            stmt.bindString(2, Forum_category_id);
        }
 
        String Topic_name = entity.getTopic_name();
        if (Topic_name != null) {
            stmt.bindString(3, Topic_name);
        }
 
        String Created_on = entity.getCreated_on();
        if (Created_on != null) {
            stmt.bindString(4, Created_on);
        }
 
        String Created_by = entity.getCreated_by();
        if (Created_by != null) {
            stmt.bindString(5, Created_by);
        }
 
        String Total_comments = entity.getTotal_comments();
        if (Total_comments != null) {
            stmt.bindString(6, Total_comments);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(7, image_url);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AllCategoryTopics readEntity(Cursor cursor, int offset) {
        AllCategoryTopics entity = new AllCategoryTopics( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Forum_topics_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Forum_category_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Topic_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Created_on
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Created_by
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Total_comments
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // image_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AllCategoryTopics entity, int offset) {
        entity.setForum_topics_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setForum_category_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTopic_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated_on(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreated_by(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotal_comments(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImage_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AllCategoryTopics entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AllCategoryTopics entity) {
        return null;
    }

    @Override
    public boolean hasKey(AllCategoryTopics entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
