package dao_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_WEEK_INTERVAL_LIST".
*/
public class AllWeekIntervalListDao extends AbstractDao<AllWeekIntervalList, Void> {

    public static final String TABLENAME = "ALL_WEEK_INTERVAL_LIST";

    /**
     * Properties of entity AllWeekIntervalList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Week = new Property(0, String.class, "week", false, "WEEK");
        public final static Property Interval = new Property(1, String.class, "interval", false, "INTERVAL");
        public final static Property Year = new Property(2, String.class, "year", false, "YEAR");
        public final static Property Current_week = new Property(3, String.class, "current_week", false, "CURRENT_WEEK");
    }


    public AllWeekIntervalListDao(DaoConfig config) {
        super(config);
    }
    
    public AllWeekIntervalListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_WEEK_INTERVAL_LIST\" (" + //
                "\"WEEK\" TEXT," + // 0: week
                "\"INTERVAL\" TEXT," + // 1: interval
                "\"YEAR\" TEXT," + // 2: year
                "\"CURRENT_WEEK\" TEXT);"); // 3: current_week
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_WEEK_INTERVAL_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AllWeekIntervalList entity) {
        stmt.clearBindings();
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(1, week);
        }
 
        String interval = entity.getInterval();
        if (interval != null) {
            stmt.bindString(2, interval);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(3, year);
        }
 
        String current_week = entity.getCurrent_week();
        if (current_week != null) {
            stmt.bindString(4, current_week);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AllWeekIntervalList entity) {
        stmt.clearBindings();
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(1, week);
        }
 
        String interval = entity.getInterval();
        if (interval != null) {
            stmt.bindString(2, interval);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(3, year);
        }
 
        String current_week = entity.getCurrent_week();
        if (current_week != null) {
            stmt.bindString(4, current_week);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AllWeekIntervalList readEntity(Cursor cursor, int offset) {
        AllWeekIntervalList entity = new AllWeekIntervalList( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // week
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // interval
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // year
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // current_week
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AllWeekIntervalList entity, int offset) {
        entity.setWeek(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setInterval(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYear(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCurrent_week(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AllWeekIntervalList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AllWeekIntervalList entity) {
        return null;
    }

    @Override
    public boolean hasKey(AllWeekIntervalList entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
