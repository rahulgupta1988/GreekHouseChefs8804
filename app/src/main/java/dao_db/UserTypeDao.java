package dao_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TYPE".
*/
public class UserTypeDao extends AbstractDao<UserType, String> {

    public static final String TABLENAME = "USER_TYPE";

    /**
     * Properties of entity UserType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserType = new Property(0, String.class, "userType", true, "USER_TYPE");
    }


    public UserTypeDao(DaoConfig config) {
        super(config);
    }
    
    public UserTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TYPE\" (" + //
                "\"USER_TYPE\" TEXT PRIMARY KEY NOT NULL );"); // 0: userType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserType entity) {
        stmt.clearBindings();
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(1, userType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserType entity) {
        stmt.clearBindings();
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(1, userType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserType readEntity(Cursor cursor, int offset) {
        UserType entity = new UserType( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // userType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserType entity, int offset) {
        entity.setUserType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserType entity, long rowId) {
        return entity.getUserType();
    }
    
    @Override
    public String getKey(UserType entity) {
        if(entity != null) {
            return entity.getUserType();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserType entity) {
        return entity.getUserType() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
