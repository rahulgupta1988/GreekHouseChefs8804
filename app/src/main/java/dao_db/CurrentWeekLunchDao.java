package dao_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURRENT_WEEK_LUNCH".
*/
public class CurrentWeekLunchDao extends AbstractDao<CurrentWeekLunch, Void> {

    public static final String TABLENAME = "CURRENT_WEEK_LUNCH";

    /**
     * Properties of entity CurrentWeekLunch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Request_date = new Property(0, String.class, "request_date", false, "REQUEST_DATE");
        public final static Property Is_checked = new Property(1, String.class, "is_checked", false, "IS_CHECKED");
        public final static Property Dayname = new Property(2, String.class, "Dayname", false, "DAYNAME");
    }


    public CurrentWeekLunchDao(DaoConfig config) {
        super(config);
    }
    
    public CurrentWeekLunchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURRENT_WEEK_LUNCH\" (" + //
                "\"REQUEST_DATE\" TEXT," + // 0: request_date
                "\"IS_CHECKED\" TEXT," + // 1: is_checked
                "\"DAYNAME\" TEXT);"); // 2: Dayname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURRENT_WEEK_LUNCH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CurrentWeekLunch entity) {
        stmt.clearBindings();
 
        String request_date = entity.getRequest_date();
        if (request_date != null) {
            stmt.bindString(1, request_date);
        }
 
        String is_checked = entity.getIs_checked();
        if (is_checked != null) {
            stmt.bindString(2, is_checked);
        }
 
        String Dayname = entity.getDayname();
        if (Dayname != null) {
            stmt.bindString(3, Dayname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CurrentWeekLunch entity) {
        stmt.clearBindings();
 
        String request_date = entity.getRequest_date();
        if (request_date != null) {
            stmt.bindString(1, request_date);
        }
 
        String is_checked = entity.getIs_checked();
        if (is_checked != null) {
            stmt.bindString(2, is_checked);
        }
 
        String Dayname = entity.getDayname();
        if (Dayname != null) {
            stmt.bindString(3, Dayname);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CurrentWeekLunch readEntity(Cursor cursor, int offset) {
        CurrentWeekLunch entity = new CurrentWeekLunch( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // request_date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // is_checked
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Dayname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CurrentWeekLunch entity, int offset) {
        entity.setRequest_date(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIs_checked(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDayname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CurrentWeekLunch entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CurrentWeekLunch entity) {
        return null;
    }

    @Override
    public boolean hasKey(CurrentWeekLunch entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
