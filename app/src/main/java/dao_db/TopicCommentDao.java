package dao_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPIC_COMMENT".
*/
public class TopicCommentDao extends AbstractDao<TopicComment, Void> {

    public static final String TABLENAME = "TOPIC_COMMENT";

    /**
     * Properties of entity TopicComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Comments_desc = new Property(0, String.class, "Comments_desc", false, "COMMENTS_DESC");
        public final static Property Comment_created_by = new Property(1, String.class, "Comment_created_by", false, "COMMENT_CREATED_BY");
        public final static Property Comment_created_on = new Property(2, String.class, "Comment_created_on", false, "COMMENT_CREATED_ON");
        public final static Property Comment_image_url = new Property(3, String.class, "comment_image_url", false, "COMMENT_IMAGE_URL");
    }


    public TopicCommentDao(DaoConfig config) {
        super(config);
    }
    
    public TopicCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPIC_COMMENT\" (" + //
                "\"COMMENTS_DESC\" TEXT," + // 0: Comments_desc
                "\"COMMENT_CREATED_BY\" TEXT," + // 1: Comment_created_by
                "\"COMMENT_CREATED_ON\" TEXT," + // 2: Comment_created_on
                "\"COMMENT_IMAGE_URL\" TEXT);"); // 3: comment_image_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPIC_COMMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopicComment entity) {
        stmt.clearBindings();
 
        String Comments_desc = entity.getComments_desc();
        if (Comments_desc != null) {
            stmt.bindString(1, Comments_desc);
        }
 
        String Comment_created_by = entity.getComment_created_by();
        if (Comment_created_by != null) {
            stmt.bindString(2, Comment_created_by);
        }
 
        String Comment_created_on = entity.getComment_created_on();
        if (Comment_created_on != null) {
            stmt.bindString(3, Comment_created_on);
        }
 
        String comment_image_url = entity.getComment_image_url();
        if (comment_image_url != null) {
            stmt.bindString(4, comment_image_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopicComment entity) {
        stmt.clearBindings();
 
        String Comments_desc = entity.getComments_desc();
        if (Comments_desc != null) {
            stmt.bindString(1, Comments_desc);
        }
 
        String Comment_created_by = entity.getComment_created_by();
        if (Comment_created_by != null) {
            stmt.bindString(2, Comment_created_by);
        }
 
        String Comment_created_on = entity.getComment_created_on();
        if (Comment_created_on != null) {
            stmt.bindString(3, Comment_created_on);
        }
 
        String comment_image_url = entity.getComment_image_url();
        if (comment_image_url != null) {
            stmt.bindString(4, comment_image_url);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TopicComment readEntity(Cursor cursor, int offset) {
        TopicComment entity = new TopicComment( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Comments_desc
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Comment_created_by
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Comment_created_on
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // comment_image_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopicComment entity, int offset) {
        entity.setComments_desc(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setComment_created_by(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComment_created_on(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComment_image_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TopicComment entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TopicComment entity) {
        return null;
    }

    @Override
    public boolean hasKey(TopicComment entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
