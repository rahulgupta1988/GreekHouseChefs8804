package dao_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_LATE_PLATE_CHEF_LIST".
*/
public class AllLatePlateChefListDao extends AbstractDao<AllLatePlateChefList, Void> {

    public static final String TABLENAME = "ALL_LATE_PLATE_CHEF_LIST";

    /**
     * Properties of entity AllLatePlateChefList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Dayname = new Property(0, String.class, "dayname", false, "DAYNAME");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Total_student_lunch = new Property(2, String.class, "total_student_lunch", false, "TOTAL_STUDENT_LUNCH");
        public final static Property Total_student_dinner = new Property(3, String.class, "total_student_dinner", false, "TOTAL_STUDENT_DINNER");
        public final static Property Lunch_allergy = new Property(4, String.class, "lunch_allergy", false, "LUNCH_ALLERGY");
        public final static Property Dinner_allergy = new Property(5, String.class, "dinner_allergy", false, "DINNER_ALLERGY");
        public final static Property Week_interval = new Property(6, String.class, "week_interval", false, "WEEK_INTERVAL");
    }


    public AllLatePlateChefListDao(DaoConfig config) {
        super(config);
    }
    
    public AllLatePlateChefListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_LATE_PLATE_CHEF_LIST\" (" + //
                "\"DAYNAME\" TEXT," + // 0: dayname
                "\"DATE\" TEXT," + // 1: date
                "\"TOTAL_STUDENT_LUNCH\" TEXT," + // 2: total_student_lunch
                "\"TOTAL_STUDENT_DINNER\" TEXT," + // 3: total_student_dinner
                "\"LUNCH_ALLERGY\" TEXT," + // 4: lunch_allergy
                "\"DINNER_ALLERGY\" TEXT," + // 5: dinner_allergy
                "\"WEEK_INTERVAL\" TEXT);"); // 6: week_interval
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_LATE_PLATE_CHEF_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AllLatePlateChefList entity) {
        stmt.clearBindings();
 
        String dayname = entity.getDayname();
        if (dayname != null) {
            stmt.bindString(1, dayname);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String total_student_lunch = entity.getTotal_student_lunch();
        if (total_student_lunch != null) {
            stmt.bindString(3, total_student_lunch);
        }
 
        String total_student_dinner = entity.getTotal_student_dinner();
        if (total_student_dinner != null) {
            stmt.bindString(4, total_student_dinner);
        }
 
        String lunch_allergy = entity.getLunch_allergy();
        if (lunch_allergy != null) {
            stmt.bindString(5, lunch_allergy);
        }
 
        String dinner_allergy = entity.getDinner_allergy();
        if (dinner_allergy != null) {
            stmt.bindString(6, dinner_allergy);
        }
 
        String week_interval = entity.getWeek_interval();
        if (week_interval != null) {
            stmt.bindString(7, week_interval);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AllLatePlateChefList entity) {
        stmt.clearBindings();
 
        String dayname = entity.getDayname();
        if (dayname != null) {
            stmt.bindString(1, dayname);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String total_student_lunch = entity.getTotal_student_lunch();
        if (total_student_lunch != null) {
            stmt.bindString(3, total_student_lunch);
        }
 
        String total_student_dinner = entity.getTotal_student_dinner();
        if (total_student_dinner != null) {
            stmt.bindString(4, total_student_dinner);
        }
 
        String lunch_allergy = entity.getLunch_allergy();
        if (lunch_allergy != null) {
            stmt.bindString(5, lunch_allergy);
        }
 
        String dinner_allergy = entity.getDinner_allergy();
        if (dinner_allergy != null) {
            stmt.bindString(6, dinner_allergy);
        }
 
        String week_interval = entity.getWeek_interval();
        if (week_interval != null) {
            stmt.bindString(7, week_interval);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AllLatePlateChefList readEntity(Cursor cursor, int offset) {
        AllLatePlateChefList entity = new AllLatePlateChefList( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dayname
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // total_student_lunch
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // total_student_dinner
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lunch_allergy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dinner_allergy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // week_interval
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AllLatePlateChefList entity, int offset) {
        entity.setDayname(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotal_student_lunch(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTotal_student_dinner(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLunch_allergy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDinner_allergy(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeek_interval(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AllLatePlateChefList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AllLatePlateChefList entity) {
        return null;
    }

    @Override
    public boolean hasKey(AllLatePlateChefList entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
