package dao_db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MENU_ITEM_DISHES".
*/
public class MenuItemDishesDao extends AbstractDao<MenuItemDishes, Void> {

    public static final String TABLENAME = "MENU_ITEM_DISHES";

    /**
     * Properties of entity MenuItemDishes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Menu_id = new Property(0, String.class, "menu_id", false, "MENU_ID");
        public final static Property Menu_title = new Property(1, String.class, "menu_title", false, "MENU_TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
    }


    public MenuItemDishesDao(DaoConfig config) {
        super(config);
    }
    
    public MenuItemDishesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MENU_ITEM_DISHES\" (" + //
                "\"MENU_ID\" TEXT," + // 0: menu_id
                "\"MENU_TITLE\" TEXT," + // 1: menu_title
                "\"DESCRIPTION\" TEXT);"); // 2: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MENU_ITEM_DISHES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MenuItemDishes entity) {
        stmt.clearBindings();
 
        String menu_id = entity.getMenu_id();
        if (menu_id != null) {
            stmt.bindString(1, menu_id);
        }
 
        String menu_title = entity.getMenu_title();
        if (menu_title != null) {
            stmt.bindString(2, menu_title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MenuItemDishes entity) {
        stmt.clearBindings();
 
        String menu_id = entity.getMenu_id();
        if (menu_id != null) {
            stmt.bindString(1, menu_id);
        }
 
        String menu_title = entity.getMenu_title();
        if (menu_title != null) {
            stmt.bindString(2, menu_title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MenuItemDishes readEntity(Cursor cursor, int offset) {
        MenuItemDishes entity = new MenuItemDishes( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // menu_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // menu_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MenuItemDishes entity, int offset) {
        entity.setMenu_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMenu_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MenuItemDishes entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MenuItemDishes entity) {
        return null;
    }

    @Override
    public boolean hasKey(MenuItemDishes entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
